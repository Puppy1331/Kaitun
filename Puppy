-- WebhookReport.lua — gửi dữ liệu lên website, có fallback HTTP khi HTTPS lỗi TLS
local _wait = task.wait
repeat _wait() until game:IsLoaded()

local Players = game:GetService("Players")
local Player  = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

-- === Config ===
local HTTPS_URL = "https://accountgiare.info.vn/webhook.php?action=ingest"
local HTTP_URL  = "http://accountgiare.info.vn/webhook.php?action=ingest"   -- fallback
local REPORT_EVERY = 60       -- giây
local MAX_RETRY    = 2        -- số lần thử lại/chu kỳ

-- === Game modules (tuỳ hệ thống của bạn) ===
local logicRoot  = Player:WaitForChild("PlayerGui"):WaitForChild("LogicHolder")
local modulesDir = logicRoot:WaitForChild("ClientLoader"):WaitForChild("Modules")
local ClientDataHandler = require(modulesDir:WaitForChild("ClientDataHandler"))

-- Helpers
local function ParseNumber(str)
    local s = tostring(str or ""):gsub(",", "")
    local multipliers = { k = 1e3, m = 1e6, b = 1e9, t = 1e12 }
    local number, suffix = s:lower():match("([%d%.]+)([kmbt]?)")
    local n = tonumber(number)
    return (n or 0) * (multipliers[suffix] or 1)
end

local function CountGodlyUnits()
    local inv = ClientDataHandler.GetValue("Inventory") or {}
    local count = 0
    for _, unit in pairs(inv) do
        local itemId = unit.ItemData and unit.ItemData.ID
        if itemId then
            local m = Player.PlayerGui.LogicHolder.ClientLoader.SharedConfig.ItemData.Units.Configs:FindFirstChild(itemId)
            if m then
                local ok, cfg = pcall(require, m)
                if ok and cfg and cfg.Rarity == "ra_godly" then
                    count += 1
                end
            end
        end
    end
    return count
end

local function do_request(url, body)
    local headers = { ["Content-Type"] = "application/json" }
    -- nhiều executor khác nhau: syn.request / request / http_request
    if syn and syn.request then
        -- 1 số bản syn hỗ trợ Options.SslVerify; đặt false nếu cần (không khuyến nghị)
        local req = { Url=url, Method="POST", Headers=headers, Body=body }
        -- req.Options = { SslVerify = true } -- mặc định true; không set = dùng default
        return syn.request(req)
    elseif request then
        return request({ Url=url, Method="POST", Headers=headers, Body=body })
    elseif http_request then
        return http_request({ Url=url, Method="POST", Headers=headers, Body=body })
    end
    return nil, "NoRequestAPI"
end

local function looks_like_tls_error(err_or_resp)
    local s = tostring(err_or_resp or "")
    -- các chuỗi hay gặp: TlsVerificationFail / certificate / ssl / handshake
    return s:find("TlsVerificationFail") or s:lower():find("ssl") or s:lower():find("certificate")
end

local function ReportOnce()
    local seedsTxt = tostring((Player:FindFirstChild("leaderstats") and Player.leaderstats:FindChild("Seeds") and Player.leaderstats.Seeds.Value) or 0)
    local data = {
        account_name = Players.LocalPlayer.Name,
        user_id      = Players.LocalPlayer.UserId,
        age_days     = Players.LocalPlayer.AccountAge,
        seeds_txt    = seedsTxt,
        seeds_num    = ParseNumber(seedsTxt),
        godly_count  = CountGodlyUnits(),
        place_id     = game.PlaceId,
        job_id       = game.JobId,
    }
    local body = HttpService:JSONEncode(data)

    local urls = { HTTPS_URL, HTTP_URL }  -- thử https trước, fail thì dùng http
    local last_err

    for _, url in ipairs(urls) do
        local tries = 0
        while tries <= MAX_RETRY do
            tries += 1
            local ok, resp_or_err = pcall(function() return do_request(url, body) end)
            if ok and type(resp_or_err) == "table" then
                local status = resp_or_err.StatusCode or resp_or_err.Status or 0
                if status >= 200 and status < 300 then
                    -- thành công
                    return true
                else
                    -- lỗi HTTP (4xx/5xx)
                    last_err = "[HTTP] "..tostring(status).." | "..tostring(resp_or_err.Body)
                    warn("[Webhook] "..last_err)
                    break -- thử URL tiếp theo (ví dụ https→http)
                end
            else
                -- exception từ pcall hoặc API trả string lỗi
                local err_msg = ok and "Unknown" or tostring(resp_or_err)
                last_err = err_msg
                warn("[Webhook] Send error: "..err_msg)
                -- nếu là lỗi TLS và còn URL fallback, thoát vòng while để chuyển URL
                if looks_like_tls_error(err_msg) then break end
                _wait(1.0) -- backoff ngắn rồi thử lại
            end
        end
        -- sang URL tiếp theo (https → http)
    end

    warn("[Webhook] All attempts failed. Last error: "..tostring(last_err))
    return false
end

-- Loop
task.spawn(function()
    while true do
        ReportOnce()
        _wait(REPORT_EVERY)
    end
end)
