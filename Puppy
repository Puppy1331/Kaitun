-- SendToAccountGiare.lua — Gửi dữ liệu lên accountgiare.info.vn/api.php
local _wait = task.wait
repeat _wait() until game:IsLoaded()

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

-- ====== CONFIG ======
local DOMAIN_HTTPS = "https://accountgiare.info.vn"
local DOMAIN_HTTP  = "http://accountgiare.info.vn"
local API_PATH     = "/api.php"  -- endpoint chính
-- Nếu API yêu cầu thêm param action hoặc token, bạn có thể nối vào querystring hoặc gửi trong body

-- ====== Module paths ======
local logicRoot  = Player:WaitForChild("PlayerGui"):WaitForChild("LogicHolder")
local modulesDir = logicRoot:WaitForChild("ClientLoader"):WaitForChild("Modules")
local ClientDataHandler = require(modulesDir:WaitForChild("ClientDataHandler"))

local unitConfigs = Player.PlayerGui
    :WaitForChild("LogicHolder")
    :WaitForChild("ClientLoader")
    :WaitForChild("SharedConfig")
    :WaitForChild("ItemData")
    :WaitForChild("Units")
    :WaitForChild("Configs")

-- ==== HTTP request với fallback Https → Http ====
local function httpRequestSafe(url, body)
    local headers = { ["Content-Type"] = "application/json" }
    local req = syn and syn.request or http_request or request or (http and http.request)
    if not req then
        warn("[HTTP] Executor không hỗ trợ request().")
        return nil
    end

    -- Thử HTTPS
    local resp = req({
        Url     = url,
        Method  = "POST",
        Headers = headers,
        Body    = body
    })

    -- Nếu thành công (status < 400), trả về
    if resp and resp.StatusCode and resp.StatusCode < 400 then
        return resp
    end

    -- Nếu HTTPS bị lỗi hoặc status >= 400, thử HTTP
    local fallbackUrl = string.gsub(url, "^https://", "http://")
    warn("[HTTP] HTTPS thất bại, thử HTTP:", fallbackUrl)
    local resp2 = req({
        Url     = fallbackUrl,
        Method  = "POST",
        Headers = headers,
        Body    = body
    })
    return resp2
end

-- ====== Collect dữ liệu và gửi ======
local function collectAndSend()
    -- Seeds
    local seedsVal = 0
    local ls = Player:FindFirstChild("leaderstats")
    if ls and ls:FindFirstChild("Seeds") then
        local v = tonumber(ls.Seeds.Value)
        if v then seedsVal = v end
    end

    -- Units godly/exclusive
    local inventory = ClientDataHandler.GetValue("Inventory")
    local godlyList = {}
    for _, unitData in pairs(inventory or {}) do
        local itemId = unitData.ItemData and unitData.ItemData.ID
        if itemId then
            local cfgModule = unitConfigs:FindFirstChild(itemId)
            if cfgModule then
                local ok, cfg = pcall(require, cfgModule)
                if ok and cfg and (cfg.Rarity == "ra_godly" or cfg.Rarity == "ra_exclusive")
                    and itemId ~= "unit_fire_flower"
                    and itemId ~= "unit_banana" then
                    table.insert(godlyList, itemId)
                end
            end
        end
    end

    -- Account age
    local accAge = tonumber(Player.AccountAge) or 0

    -- Chuẩn bị payload JSON
    local payload = {
        name        = Player.Name,
        seed        = seedsVal,
        units       = (#godlyList > 0) and table.concat(godlyList, ",") or "None",
        account_age = accAge,
        time        = os.date("%Y-%m-%d %H:%M:%S")
    }

    local body = HttpService:JSONEncode(payload)
    local urlHttps = DOMAIN_HTTPS .. API_PATH

    local resp = httpRequestSafe(urlHttps, body)
    if resp and resp.StatusCode and resp.StatusCode < 400 then
        print("[SEND] Gửi thành công:", body)
    else
        warn("[SEND] Gửi thất bại:", resp and (resp.StatusCode or "no status"), resp and resp.Body)
    end
end

-- ====== Loop gửi định kỳ ======
while true do
    collectAndSend()
    task.wait(30)  -- gửi mỗi 30s, bạn có thể thay đổi
end
