-- ========== KAITUN VIP FINAL FIXED (NO NIL FUNCTION, FULL LOGIC, AUTO MAP CHECK) ==========
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local _wait = task.wait

-- ==== MODULES ==== 
local ClientModules, ClientDataHandler, SharedItemData
local function kaitun_loadModules()
    if player:FindFirstChild("PlayerGui") then
        local LogicHolder = player.PlayerGui:FindFirstChild("LogicHolder")
        if LogicHolder then
            local Modules = LogicHolder:FindFirstChild("ClientLoader") and LogicHolder.ClientLoader:FindFirstChild("Modules")
            if Modules then
                ClientModules = Modules
                ClientDataHandler = require(Modules:WaitForChild("ClientDataHandler"))
                SharedItemData = require(Modules:WaitForChild("SharedItemData"))
            end
        end
    end
end
kaitun_loadModules()

-- ==== CONFIG ==== 
local NEED_UNIT_IDS = {
    unit_tomato_plant = true,
    unit_laser_plant = true,
    unit_farmer_npc = true
}
local SEED_THRESHOLD_FOR_ROLL = 10000
local WIN_THRESHOLD_FOR_RETURN = 25
local STOP_FARM_WIN = {val=false}

-- ==== MAP CFrame (chính xác) ==== 
local CFRAME_JUNGLE = CFrame.new(-335.381, 68.468, -272.473)
local CFRAME_FARM   = CFrame.new(-335.381, 68.468, -252.008)
local THRESHOLD = 15

local function kaitun_isSimilarCFrame(cf1, cf2, threshold)
    threshold = threshold or THRESHOLD
    return (cf1.Position - cf2.Position).Magnitude < threshold
end

local function kaitun_getBaseHP()
    return workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("BaseHP")
end

local function kaitun_detectMapType()
    local base = kaitun_getBaseHP()
    if not base then return "unknown" end
    if kaitun_isSimilarCFrame(base.CFrame, CFRAME_JUNGLE) then return "jungle"
    elseif kaitun_isSimilarCFrame(base.CFrame, CFRAME_FARM) then return "farm"
    else return "unknown" end
end

-- ==== UTILS ==== 
local function kaitun_debug(msg, ...) print("[KAITUN VIP]", string.format(msg, ...)) end
local function kaitun_getSeedCount()
    local v = 0
    pcall(function()
        local ls = player:FindFirstChild("leaderstats")
        local seeds = ls and ls:FindFirstChild("Seeds")
        if seeds and seeds.Value then
            v = tonumber(tostring(seeds.Value):gsub(",", "")) or 0
        end
    end)
    return v
end
local function kaitun_getCash()
    local cashValue = 0
    pcall(function()
        local leaderstats = player:FindFirstChild("leaderstats")
        local cash = leaderstats and leaderstats:FindFirstChild("Cash")
        if cash and cash.Value then
            local str = tostring(cash.Value):gsub(",", ""):gsub("%.", "")
            cashValue = tonumber(str) or 0
        end
    end)
    return cashValue
end
local function kaitun_getWinStatUI()
    local win = 0
    pcall(function()
        win = tonumber(player.PlayerGui.GameGui.Screen.Middle.Stats.Items.Frame.ScrollingFrame.GamesWon.Items.Items.Val.Text) or 0
    end)
    return win
end
local function kaitun_getInventory()
    local inv = {}
    if ClientDataHandler and ClientDataHandler.GetValue then
        local ok, result = pcall(function() return ClientDataHandler.GetValue("Inventory") end)
        if ok and result then inv = result end
    end
    return inv
end

-- ==== LỌC KHO, EQUIP CHUẨN ==== 
local function kaitun_equipAndFilter()
    if not ClientDataHandler or not SharedItemData then kaitun_loadModules() end
    if not ClientDataHandler or not SharedItemData then kaitun_debug("KHÔNG LOAD ĐƯỢC MODULE!") return end
    local inv = kaitun_getInventory()
    local equipped, kept, toDelete, unequipAllFirst = {}, {}, {}, {}
    for uniqueId, unitData in pairs(inv) do
        local itemId = unitData.ItemData and unitData.ItemData.ID
        local info = SharedItemData.GetItem(itemId)
        local rarity = info and info.Params and info.Params.Rarity or "Unknown"
        table.insert(unequipAllFirst, uniqueId)
        if rarity == "ra_godly" then
            if NEED_UNIT_IDS[itemId] and not equipped[itemId] then
                equipped[itemId] = uniqueId
            end
        else
            if NEED_UNIT_IDS[itemId] then
                if not kept[itemId] then
                    kept[itemId] = uniqueId
                    equipped[itemId] = uniqueId
                else
                    table.insert(toDelete, uniqueId)
                end
            else
                table.insert(toDelete, uniqueId)
            end
        end
    end
    local SetUnitEquippedRemote = ReplicatedStorage.RemoteFunctions:FindFirstChild("SetUnitEquipped")
    local DeleteUnitRemote = ReplicatedStorage.RemoteFunctions:FindFirstChild("DeleteUnit")
    if not SetUnitEquippedRemote or not DeleteUnitRemote then
        kaitun_debug("Không tìm thấy RemoteFunctions SetUnitEquipped hoặc DeleteUnit")
        return
    end
    for _, uniqueId in ipairs(unequipAllFirst) do
        pcall(function() SetUnitEquippedRemote:InvokeServer(tostring(uniqueId), false) end)
        _wait(0.05)
    end
    for itemId, uniqueId in pairs(equipped) do
        pcall(function() SetUnitEquippedRemote:InvokeServer(tostring(uniqueId), true) end)
        _wait(0.05)
    end
    for _, uniqueId in ipairs(toDelete) do
        pcall(function() DeleteUnitRemote:InvokeServer({tostring(uniqueId)}) end)
        _wait(0.12)
    end
    kaitun_debug("Đã equip và lọc unit cần thiết.")
end

-- ==== CHECK ĐỦ UNIT CẦN ==== 
local function kaitun_hasAllNeededUnits()
    local has, inv = {}, kaitun_getInventory()
    for _, item in pairs(inv) do
        local unitID = item.ItemData and item.ItemData.ID
        if NEED_UNIT_IDS[unitID] then has[unitID] = true end
    end
    for unitID in pairs(NEED_UNIT_IDS) do
        if not has[unitID] then
            kaitun_debug("Thiếu unit cần thiết: %s", unitID)
            return false
        end
    end
    kaitun_debug("Đủ bộ unit cần thiết.")
    return true
end

-- ==== AUTO ROLL ==== 
local function kaitun_autoRollIfNeeded()
    local seeds = kaitun_getSeedCount()
    local hasAll = kaitun_hasAllNeededUnits()
    if seeds >= SEED_THRESHOLD_FOR_ROLL and not hasAll then
        local bannerID = "ub_classic_v6"
        local rollAmount = 10
        kaitun_debug("Chưa đủ đội hình, roll nếu có seed đủ (%d seeds).", seeds)
        local BuyUnitBoxRemote = ReplicatedStorage.RemoteFunctions:FindFirstChild("BuyUnitBox")
        if BuyUnitBoxRemote then
            pcall(function()
                BuyUnitBoxRemote:InvokeServer(bannerID, rollAmount)
                kaitun_debug("Đã gọi roll banner.")
            end)
            _wait(0.1)
        else
            kaitun_debug("Không tìm thấy RemoteFunction BuyUnitBox")
        end
    elseif hasAll then
        kaitun_debug("Đã đủ 3 unit cần, dừng roll.")
    end
end

-- ==== JOIN LOBBY FARM HOẶC JUNGLE ==== 
local function kaitun_joinCorrectLobby()
    local win = kaitun_getWinStatUI()
    local hasAll = kaitun_hasAllNeededUnits()
    local lobbyFolderName = "LobbiesJungle"
    if hasAll and win < WIN_THRESHOLD_FOR_RETURN then
        lobbyFolderName = "LobbiesFarm"
    end
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        local char = player.Character or player.CharacterAdded:Wait()
        hrp = char:WaitForChild("HumanoidRootPart", 5)
    end
    local lobbyFolder = Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild(lobbyFolderName)
    if not lobbyFolder then
        kaitun_debug("Không tìm thấy folder: %s", lobbyFolderName)
        return
    end
    for _, lobby in ipairs(lobbyFolder:GetChildren()) do
        if lobby:IsA("Model") and lobby:GetAttribute("MaxPlayers") == 1 and lobby:GetAttribute("StartTime") == math.huge then
            local cage = lobby:FindFirstChild("Cage")
            if cage then
                for _, part in ipairs(cage:GetChildren()) do
                    if part:IsA("BasePart") then
                        hrp.CFrame = part.CFrame + Vector3.new(0, 3, 0)
                        _wait(0.3)
                        hrp.CFrame = part.CFrame
                        kaitun_debug("Đã vào lobby: %s", lobbyFolderName)
                        return
                    end
                end
            end
        end
    end
    kaitun_debug("Không có lobby trống!")
end

-- ==== ĐIỀU KIỆN ĐẶT UNIT ==== 
local function kaitun_canPlaceUnit(unitName, cf)
    local gui = player.PlayerGui:FindFirstChild("GameGui") and player.PlayerGui.GameGui:FindFirstChild("Screen") and player.PlayerGui.GameGui.Screen:FindFirstChild("Middle")
    local voteGui = gui and gui:FindFirstChild("DifficultyVote")
    local Entities = Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild("Entities")
    local cost = (unitName == "unit_farmer_npc") and 200 or (unitName == "unit_laser_plant" and 1500 or 150)
    local cashNow = kaitun_getCash()
    if voteGui and voteGui.Visible then return false end
    if not Entities then return false end
    if cashNow < cost then return false end
    return true
end

local function kaitun_findUnitID(unitName, cf, threshold)
    threshold = threshold or 8
    local Entities = Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild("Entities")
    if not Entities then return nil end
    for _, unit in pairs(Entities:GetChildren()) do
        if unit.Name == unitName and unit:GetAttribute("ID") then
            local part = unit.PrimaryPart or unit:FindFirstChild("Anchor")
            if part and (part.Position - cf.Position).Magnitude <= threshold then
                return unit:GetAttribute("ID")
            end
        end
    end
    return nil
end

local UPGRADE_PRICES = {
    ["unit_farmer_npc"]   = {250, 350, 500, 850},
    ["unit_laser_plant"]  = {3000, 5400, 7800, 15000},
}

local function kaitun_smartPlaceAndUpgradeUnit(unitName, cf)
    for i=1,12 do
        if kaitun_canPlaceUnit(unitName, cf) then
            kaitun_debug("[AUTO PLACE] Đủ điều kiện, đặt %s!", unitName)
            ReplicatedStorage.RemoteFunctions.PlaceUnit:InvokeServer(
                unitName, {Valid=true, Rotation=180, CF=cf, Position=Vector3.new(cf.X, cf.Y, cf.Z)}
            )
            _wait(1)
            local id = kaitun_findUnitID(unitName, cf, 10)
            if id then
                kaitun_debug("[AUTO PLACE] Đã đặt thành công %s, ID: %s", unitName, id)
                local upgrades = UPGRADE_PRICES[unitName]
                if upgrades then
                    for j = 1, #upgrades do
                        while kaitun_getCash() < upgrades[j] do _wait(0.2) end
                        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id)
                        kaitun_debug("Nâng cấp %s lần %d", unitName, j)
                        _wait(0.25)
                    end
                end
                return
            else
                kaitun_debug("[AUTO PLACE] TIMEOUT: Không đặt được unit %s sau %d lần thử!", unitName, i)
            end
        else
            kaitun_debug("[AUTO PLACE] %s chưa đủ tiền (%d/%d)", unitName, kaitun_getCash(), (unitName == "unit_farmer_npc") and 200 or (unitName == "unit_laser_plant" and 1500 or 150))
            _wait(0.6)
        end
    end
end

-- ==== SKIP WAVE, VOTE, AUTO RESTART ==== 
local function kaitun_skipWaveLoop()
    local skipRemote = ReplicatedStorage:WaitForChild("RemoteFunctions"):WaitForChild("SkipWave")
    task.spawn(function()
        while true do
            pcall(function() skipRemote:InvokeServer("y") end)
            _wait(1)
        end
    end)
end

local function kaitun_autoVoteAndSpeed(voteType)
    local voteRemote = ReplicatedStorage:WaitForChild("RemoteFunctions"):WaitForChild("PlaceDifficultyVote")
    local speedRemote = ReplicatedStorage:WaitForChild("RemoteFunctions"):WaitForChild("ChangeTickSpeed")
    task.spawn(function()
        while true do
            local ok, voteGui = pcall(function()
                return player.PlayerGui.GameGui.Screen.Middle.DifficultyVote
            end)
            if ok and voteGui and voteGui.Visible then
                kaitun_debug("Đang vote: %s", voteType)
                pcall(function() voteRemote:InvokeServer(voteType) end)
                _wait(0.25)
                kaitun_debug("Set tốc độ x2")
                pcall(function() speedRemote:InvokeServer(2) end)
                repeat _wait(0.2) until not (voteGui and voteGui.Visible)
            end
            _wait(0.3)
        end
    end)
end

local function kaitun_autoRestartGame(initFunc)
    task.spawn(function()
        local lastRestart = 0
        while true do
            _wait(1)
            local ok, GameEnd = pcall(function()
                return player.PlayerGui.GameGui.Screen.Middle.GameEnd
            end)
            if ok and GameEnd and GameEnd.Visible and tick() - lastRestart > 8 then
                lastRestart = tick()
                kaitun_debug("GameEnd hiện, đang restart game")
                local restartRemote = ReplicatedStorage.RemoteFunctions:FindFirstChild("RestartGame")
                if restartRemote then
                    pcall(function() restartRemote:InvokeServer() end)
                    task.delay(3, initFunc)
                end
                repeat _wait(0.5) until not (GameEnd and GameEnd.Visible)
            end
        end
    end)
end

-- ==== RETURN LOBBY ==== 
local function kaitun_checkReturnLobbyLoop()
    task.spawn(function()
        while true do
            _wait(2)
            local seeds = kaitun_getSeedCount()
            local win = kaitun_getWinStatUI()
            local hasAll = kaitun_hasAllNeededUnits()
            kaitun_debug("[CHECK] Seed: %d | Win: %d | Đủ đội hình: %s", seeds, win, tostring(hasAll))
            if game.PlaceId == 108533757090220 then
                if not hasAll and seeds >= SEED_THRESHOLD_FOR_ROLL then
                    kaitun_debug("Thiếu đội hình, đủ seeds, ở lobby rồi, auto roll cho đủ.")
                    kaitun_autoRollIfNeeded()
                    kaitun_equipAndFilter()
                    _wait(1)
                elseif hasAll and win < WIN_THRESHOLD_FOR_RETURN then
                    kaitun_debug("Đã đủ đội hình, chưa đủ win, auto join lobby Farm.")
                    kaitun_joinCorrectLobby()
                elseif hasAll and win >= WIN_THRESHOLD_FOR_RETURN then
                    kaitun_debug("Đã đủ đội hình và đủ win, ở lobby rồi, chuyển sang farm thua!")
                    STOP_FARM_WIN.val = true
                    kaitun_joinCorrectLobby()
                end
            else
                if not hasAll and seeds >= SEED_THRESHOLD_FOR_ROLL then
                    kaitun_debug("Thiếu đội hình, đủ seeds, VỀ LOBBY để roll.")
                    pcall(function()
                        ReplicatedStorage.RemoteFunctions.BackToMainLobby:InvokeServer()
                    end)
                    break
                elseif hasAll and win >= WIN_THRESHOLD_FOR_RETURN then
                    kaitun_debug("Đã đủ đội hình và đủ win, VỀ LOBBY để chuyển chế độ farm thua!")
                    STOP_FARM_WIN.val = true
                    pcall(function()
                        ReplicatedStorage.RemoteFunctions.BackToMainLobby:InvokeServer()
                    end)
                    break
                elseif hasAll and win < WIN_THRESHOLD_FOR_RETURN then
                    kaitun_debug("Đủ đội hình, chưa đủ win, TIẾP TỤC FARM WIN, KHÔNG return.")
                end
            end
        end
    end)
end

-- ==== MAIN LOBBY ==== 
local function kaitun_lobby_mainPRO()
    kaitun_debug("Bắt đầu xử lý lobby...")
    kaitun_loadModules()
    kaitun_equipAndFilter()
    _wait(1)
    kaitun_autoRollIfNeeded()
    _wait(1)
    kaitun_joinCorrectLobby()
    kaitun_checkReturnLobbyLoop()
end

-- ==== MAP LOGIC (FARM/JUNGLE - AUTO NHẬN DIỆN) ==== 
local MY_UNIT_LIST_WIN = {
    { "unit_farmer_npc", CFrame.new(-331.524, 63.384, -133.701) },
    { "unit_laser_plant", CFrame.new(-324.420, 63.347, -155.569) },
}
local MY_UNIT_LIST_LOSE = {
    { "unit_tomato_plant", CFrame.new(-335.341, 62.845, -124.638) }
}

local function kaitun_map_mainPRO()
    kaitun_skipWaveLoop()
    kaitun_autoRestartGame(kaitun_map_mainPRO)
    kaitun_checkReturnLobbyLoop()
    -- ===== AUTO NHẬN DIỆN MAP =====
    local mapType = kaitun_detectMapType()
    kaitun_debug("[MAP] Xác định map thực tế: %s", mapType)
    local win = kaitun_getWinStatUI()
    local hasAll = kaitun_hasAllNeededUnits()
    kaitun_debug("[MAP] Win: %d | Đủ đội hình: %s", win, tostring(hasAll))
    if STOP_FARM_WIN.val or mapType == "jungle" then
        kaitun_debug("Nhận diện map JUNGLE! Farm THUA.")
        kaitun_autoVoteAndSpeed("dif_impossible")
        for _, v in ipairs(MY_UNIT_LIST_LOSE) do
            local unitName, cf = v[1], v[2]
            kaitun_smartPlaceAndUpgradeUnit(unitName, cf)
        end
        return
    end
    if hasAll and win < WIN_THRESHOLD_FOR_RETURN and mapType == "farm" then
        kaitun_debug("Nhận diện map FARM! Farm WIN.")
        kaitun_autoVoteAndSpeed("dif_easy")
        for _, v in ipairs(MY_UNIT_LIST_WIN) do
            local unitName, cf = v[1], v[2]
            kaitun_smartPlaceAndUpgradeUnit(unitName, cf)
        end
    else
        kaitun_debug("Không xác định được map phù hợp để auto farm!")
    end
end

-- ==== PHÂN NHÁNH THEO MAP ==== 
if game.PlaceId == 108533757090220 then
    kaitun_lobby_mainPRO()
elseif game.PlaceId == 123516946198836 then
    kaitun_map_mainPRO()
else
    kaitun_debug("PlaceId %d không được hỗ trợ!", game.PlaceId)
end
