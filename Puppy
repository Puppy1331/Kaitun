-- SendToAccountGiare.lua — Gửi dữ liệu lên accountgiare.info.vn/api.php

local _wait = task.wait
repeat _wait() until game:IsLoaded()

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local Player = Players.LocalPlayer

-- ====== CONFIG ======
local CONFIG = {
    API_URL = "https://accountgiare.info.vn/api.php", -- Chỉ dùng HTTPS để bảo mật
    REQUEST_TIMEOUT = 10, -- Timeout cho request (giây)
    SEND_INTERVAL = 60, -- Gửi mỗi 60 giây
    MAX_RETRIES = 3, -- Số lần thử lại nếu request thất bại
    RETRY_DELAY = 5, -- Delay giữa các lần thử lại (giây)
    -- API_TOKEN = "your_api_token_here", -- Nếu API yêu cầu token, bỏ comment và điền token
}

-- ====== Module paths ======
local function getModulePaths()
    local success, result = pcall(function()
        local logicRoot = Player:WaitForChild("PlayerGui"):WaitForChild("LogicHolder", 5)
        local modulesDir = logicRoot:WaitForChild("ClientLoader"):WaitForChild("Modules", 5)
        local unitConfigs = logicRoot
            :WaitForChild("ClientLoader")
            :WaitForChild("SharedConfig")
            :WaitForChild("ItemData")
            :WaitForChild("Units")
            :WaitForChild("Configs", 5)
        return modulesDir, unitConfigs
    end)
    if not success then
        warn("[INIT] Failed to get module paths: ", result)
        return nil, nil
    end
    return result
end

-- ====== HTTP request với retry và timeout ======
local function httpRequest(url, body, retries)
    retries = retries or CONFIG.MAX_RETRIES
    local headers = {
        ["Content-Type"] = "application/json",
        -- ["Authorization"] = "Bearer " .. CONFIG.API_TOKEN, -- Nếu API yêu cầu token
    }
    local req = syn and syn.request or http_request or request or (http and http.request)
    if not req then
        warn("[HTTP] Executor không hỗ trợ request().")
        return nil
    end

    for attempt = 1, retries do
        local success, response = pcall(function()
            return req({
                Url = url,
                Method = "POST",
                Headers = headers,
                Body = body,
                Timeout = CONFIG.REQUEST_TIMEOUT
            })
        end)

        if success and response and response.StatusCode and response.StatusCode < 400 then
            local decoded = pcall(HttpService.JSONDecode, HttpService, response.Body)
            if decoded then
                print("[HTTP] Gửi thành công:", response.Body)
                return response
            else
                warn("[HTTP] Không thể giải mã response:", response.Body)
            end
        else
            warn(string.format(
                "[HTTP] Thất bại (lần %d/%d): %s",
                attempt,
                retries,
                response and (response.StatusCode or "no status")
            ))
        end

        if attempt < retries then
            warn("[HTTP] Thử lại sau", CONFIG.RETRY_DELAY, "giây...")
            _wait(CONFIG.RETRY_DELAY)
        end
    end

    warn("[HTTP] Đã hết số lần thử lại.")
    return nil
end

-- ====== Collect dữ liệu và gửi ======
local function collectAndSend()
    local modulesDir, unitConfigs = getModulePaths()
    if not modulesDir or not unitConfigs then
        warn("[COLLECT] Không thể truy cập module paths.")
        return
    end

    -- Load ClientDataHandler
    local ClientDataHandler
    local success, result = pcall(function()
        return require(modulesDir:WaitForChild("ClientDataHandler", 5))
    end)
    if not success then
        warn("[COLLECT] Không thể load ClientDataHandler:", result)
        return
    end
    ClientDataHandler = result

    -- Seeds
    local seedsVal = 0
    local ls = Player:FindFirstChild("leaderstats")
    if ls then
        local seeds = ls:FindFirstChild("Seeds")
        if seeds then
            seedsVal = tonumber(seeds.Value) or 0
        end
    end

    -- Units godly/exclusive
    local inventory = ClientDataHandler.GetValue("Inventory") or {}
    local godlyList = {}
    for _, unitData in pairs(inventory) do
        local itemId = unitData.ItemData and unitData.ItemData.ID
        if itemId then
            local cfgModule = unitConfigs:FindFirstChild(itemId)
            if cfgModule then
                local ok, cfg = pcall(require, cfgModule)
                if ok and cfg and (cfg.Rarity == "ra_godly" or cfg.Rarity == "ra_exclusive") then
                    if itemId ~= "unit_fire_flower" and itemId ~= "unit_banana" then
                        table.insert(godlyList, itemId)
                    end
                end
            end
        end
    end

    -- Account age
    local accAge = tonumber(Player.AccountAge) or 0

    -- Chuẩn bị payload JSON
    local payload = {
        name = Player.Name,
        seed = seedsVal,
        units = godlyList, -- Gửi dưới dạng mảng thay vì chuỗi
        account_age = accAge,
        time = os.date("!%Y-%m-%dT%H:%M:%SZ") -- ISO 8601 format
    }

    local success, body = pcall(HttpService.JSONEncode, HttpService, payload)
    if not success then
        warn("[COLLECT] Không thể mã hóa payload:", body)
        return
    end

    local response = httpRequest(CONFIG.API_URL, body)
    if not response then
        warn("[SEND] Gửi thất bại.")
    end
end

-- ====== Loop gửi định kỳ với cleanup ======
local running = true
game:BindToClose(function()
    running = false
end)

while running do
    local success, err = pcall(collectAndSend)
    if not success then
        warn("[LOOP] Lỗi khi thu thập/gửi:", err)
    end
    _wait(CONFIG.SEND_INTERVAL)
end
